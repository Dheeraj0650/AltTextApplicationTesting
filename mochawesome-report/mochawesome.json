{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-08T22:54:01.635Z",
    "end": "2024-03-08T22:54:29.598Z",
    "duration": 27963,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "003f463a-0cbe-4c7e-a932-adcd3523404c",
      "title": "",
      "fullFile": "/Users/kottedheeru/Documents/AltTextApplication_testing/src/testcases/loadImages.js",
      "file": "/src/testcases/loadImages.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "50df8350-23bb-4bb6-bb53-6ea9c4e8b0ed",
          "title": "tests ability to Load Images",
          "fullFile": "/Users/kottedheeru/Documents/AltTextApplication_testing/src/testcases/loadImages.js",
          "file": "/src/testcases/loadImages.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "checking ability to load images through UI",
              "fullTitle": "tests ability to Load Images checking ability to load images through UI",
              "timedOut": false,
              "duration": 17084,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await getWebDriver();\n\nawait database.deleteData(process.env.DB_TABLE, 'course_id', process.env.COURSE_ID)\nawait launchBrowserAndLoginToApp(driver);\nawait action.click(driver, altTextAppXpaths.alt_text_buttons_specific.replace(\"?\", \"Load Images\"));\nawait action.sendKeys(driver, process.env.COURSE_ID, altTextLoadPageXpaths.course_id_input);\nawait action.click(driver, altTextLoadPageXpaths.alt_text_button_specific.replace(\"?\", \"Load Images from Canvas Course\"));\nlet element = await action.getElement(driver, altTextLoadPageXpaths.alert_banner.replace(\"?\", \"image was successfully added to the queue from the canvas course\"), 30000);\nassert.strictEqual(await action.doesElementExists(driver, element), true, \"failed to lod images on to application - part 1\");\nawait action.sendKeys(driver, process.env.COURSE_ID, altTextLoadPageXpaths.course_id_input);\nawait action.click(driver, altTextLoadPageXpaths.alt_text_button_specific.replace(\"?\", \"Load Images from Canvas Course\"));\nelement = await action.getElement(driver, altTextLoadPageXpaths.alert_banner.replace(\"?\", \"No images were added to the queue from the canvas course\"), 30000);\nassert.strictEqual(await action.doesElementExists(driver, element), true, \"failed to lod images on to application - part 2\");",
              "err": {},
              "uuid": "e83956e0-8368-4a9f-8c44-0374b4893325",
              "parentUUID": "50df8350-23bb-4bb6-bb53-6ea9c4e8b0ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "checking whether images loaded on to the home page",
              "fullTitle": "tests ability to Load Images checking whether images loaded on to the home page",
              "timedOut": false,
              "duration": 10767,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await getWebDriver();\nawait launchBrowserAndLoginToApp(driver);\nawait action.click(driver, altTextAppXpaths.alt_text_buttons_specific.replace(\"?\", \"Home\"));\nawait action.click(driver, altTextHomePageXpaths.courses_drop_down);\nawait driver.sleep(2000);\nawait action.click(driver, altTextHomePageXpaths.course_drop_down_list.replace(\"?\", \"Temp - Alt Text Test 1\"));\nawait driver.sleep(2000);\nlet imageElement = await action.getElement(driver, altTextHomePageXpaths.course_image_name, 30000);\nlet imageText = await action.getTextFromElement(imageElement);\nassert.strictEqual(altTextAppNames.course_image_names.includes(imageText), true, \"image is not loaded on to the application properly\");",
              "err": {},
              "uuid": "b9e5fa95-b212-4d87-b3b9-27069602d0c5",
              "parentUUID": "50df8350-23bb-4bb6-bb53-6ea9c4e8b0ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "closing the browser",
              "fullTitle": "tests ability to Load Images closing the browser",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let driver = await getWebDriver();\nawait driver.quit();",
              "err": {},
              "uuid": "c56e1e25-f19c-4b3c-8b97-233ad6cb6622",
              "parentUUID": "50df8350-23bb-4bb6-bb53-6ea9c4e8b0ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e83956e0-8368-4a9f-8c44-0374b4893325",
            "b9e5fa95-b212-4d87-b3b9-27069602d0c5",
            "c56e1e25-f19c-4b3c-8b97-233ad6cb6622"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27956,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}